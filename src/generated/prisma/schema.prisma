// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                       String            @id @map("_id")
  name                     String
  email                    String
  emailVerified            Boolean
  image                    String?
  createdAt                DateTime
  updatedAt                DateTime
  sessions                 Session[]
  accounts                 Account[]
  isPro                    Boolean           @default(false)
  coverLetterRoots         CoverLetterRoot[] // Relation to the user's cover letter roots
  coverLetterCount         Int               @default(0) // Total count since beginning
  coverLetterCountPerMonth Int               @default(0) // Count for the current month
  monthlyCountLastReset    DateTime? // Timestamp of when coverLetterCountPerMonth was last reset

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Represents a single "cover letter generation instance" which can have multiple versions
model CoverLetterRoot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId // Link to the user who created it
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Tracks the last update to this root or its versions

  // Store initial inputs that led to the first version.
  // These are useful for context or if the user wants to re-generate from original inputs.
  originalResumeText     String
  originalJobDescription String
  originalName           String?
  originalEmail          String?
  originalPhoneNumber    String?
  originalPortfolioUrl   String?
  originalLanguage       String?
  originalDate           String? // The 'localDate' from frontend

  // Metadata extracted from the first generation, can be updated if a "primary" version changes.
  // These are useful for displaying in history.
  currentJobRole String?
  currentCompany String?

  versions CoverLetterVersion[] // One-to-many relation to its versions
}

// Represents a specific version of a cover letter
model CoverLetterVersion {
  id     String          @id @default(auto()) @map("_id") @db.ObjectId
  rootId String          @db.ObjectId // Foreign key to CoverLetterRoot
  root   CoverLetterRoot @relation(fields: [rootId], references: [id], onDelete: Cascade)

  content            String // The actual HTML/markdown content of this version
  versionNumber      Int // Sequential number for this root (e.g., 1, 2, 3...)
  createdAt          DateTime @default(now())
  refinementTypeUsed String? // e.g., "initial", "More Concise", "More Formal"
  // (captures how this version was created/refined)
}
